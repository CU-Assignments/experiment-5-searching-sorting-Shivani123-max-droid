int partition(vector<int>& nums, int left, int right) {
    int pivot = nums[right];  
    int p = left;
    
    for (int i = left; i < right; i++) {
        if (nums[i] >= pivot) {  // Sorting in descending order
            swap(nums[i], nums[p]);
            p++;
        }
    }
    
    swap(nums[p], nums[right]);
    return p;
}

int quickSelect(vector<int>& nums, int left, int right, int k) {
    if (left <= right) {
        int pivotIndex = left + rand() % (right - left + 1);  // Random pivot
        swap(nums[pivotIndex], nums[right]);
        
        int p = partition(nums, left, right);
        if (p == k) return nums[p];
        else if (p < k) return quickSelect(nums, p + 1, right, k);
        else return quickSelect(nums, left, p - 1, k);
    }
    
    return -1;
}

int findKthLargest(vector<int>& nums, int k) {
    return quickSelect(nums, 0, nums.size() - 1, k - 1);
}
